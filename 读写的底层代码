##读取和写入文件的底层代码##
1.  **读取文件**  
**要对打开的文件进行写操作的时候，打开方式应该是读写操作**  
```将文件中的内容读取到buffer对象中。```  
``` javascript
/*
* fs.read(fd, buffer, offset, length, position, callback)
*   fd : 通过open方法成功打开一个文件返回的编号
*   buffer : buffer对象
*   offset : 新内容添加到buffer中的起始位置
*   length : 添加到buffer中内容的长度
*   position : 读取的文件中的起始位置
*   callback : 回调
*       - err :   报错内容
*       - len :   buffer的长度
*       - newBf : 新的buffer对象
* */
```
``` javascript
var fs = require('fs');
fs.open('1.txt','r+',function (err, fd) {

    if(err){
        console.log("打开错误");
    }else{
        var buf = new Buffer("123456789");
        console.log(buf); // <Buffer 31 32 33 34 35 36 37 38 39>

        fs.read(fd, buf, 0, 4, null, function (err, len, newBf) {
            console.log( buf );  // <Buffer 61 62 63 64 35 36 37 38 39>
            console.log( len );  // 4
            console.log( newBf );// <Buffer 61 62 63 64 35 36 37 38 39>
        })

    }
});
```
2. **写入文件**  
   2.1 将buffer中的数据写入文件
``` javascript
/*
* fs.write(fd, buffer, offset, length, position, callback)
*   fd : 打开的文件
*   buffer : 要写入的数据
*   offset : buffer随心中要写入的数据的起始位置
*   length : 要写入的buffer数据的长度
*   position : fd中的起始位置
*   callback : 回调
* */
```
``` javascript
var fs = require('fs');
fs.open('1.txt', 'r+', function (err, fd) {
    if(err){
    }else{
        var bf = new Buffer('asd');
        
        fs.write(fd, bf, 0, 3, 0, function(){}); //将buffer中的数据写入文件了

    }
});
```
   2.2 直接将数据写入文件
``` javascript
var fs = require('fs');
fs.open('1.txt', 'r+', function (err, fd) {
    if(err){
    }else{
       //直接将数据写入，2为写入文件的位置
        fs.write(fd, "asb", 2 ,'utf-8')
        
    }
});
```
